{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","React","Component","Timeset","src","alt","Timer","alert","for","name","value","id","type","onClick","this","handleStart","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,kC,qJCcrCC,E,YACJ,WAAYC,GAAQ,qEACZA,I,sEAGN,OACE,yBAAKC,UAAU,oBACb,wBAAIA,UAAU,kBAAd,mB,GAPaC,IAAMC,WAcrBC,E,iLAEF,OACE,yBAAKH,UAAU,qBACb,yBACEA,UAAU,cACVI,IAAI,2IACJC,IAAI,sB,GAPQJ,IAAMC,WA4BtBI,GAdoBL,IAAMC,U,sLAgB5BK,MAAM,kB,+BAGN,OACE,yBAAKP,UAAU,mBACb,2BAAOQ,IAAI,YAAX,gBACA,4BAAQR,UAAU,eAAeS,KAAK,YACpC,4BAAQC,MAAM,UAAd,sBACA,4BAAQA,MAAM,SAAd,YACA,4BAAQA,MAAM,UAAd,YACA,4BAAQA,MAAM,SAAd,aAEF,4BACEC,GAAG,kBACHC,KAAK,SACLC,QAASC,KAAKC,aAHhB,e,GAdYd,IAAMC,YA0BXc,EA9Ef,WACE,OACE,yBAAKhB,UAAU,eACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGYiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5cb654de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"app-wrapper\">\n        <Header />\n        <Timeset />\n        <Timer />\n    </div>\n  );\n}\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div className=\"header-container\">\n        <h1 className=\"header-content\">Be Fasting</h1>\n      </div>\n    );\n  }\n}\n\n\nclass Timeset extends React.Component {\n  render() {\n    return (\n      <div className=\"timeset-container\">\n        <img\n          className=\"timeset-img\"\n          src=\"https://images.unsplash.com/photo-1418848372148-629424a5ca04?ixlib=rb-1.2.1&q=85&fm=jpg&crop=entropy&cs=srgb&ixid=eyJhcHBfaWQiOjE0NTg5fQ\"\n          alt=\"set the time\"\n        />\n      </div>\n    );\n  }\n}\n\nclass Inspiration extends React.Component {\n  renter() {\n    return (\n      <div className=\"inspiration-container\">\n        <img\n          className=\"inspiration-img\"\n          src=\"https://images.unsplash.com/photo-1501004318641-b39e6451bec6?ixlib=rb-1.2.1&q=85&fm=jpg&crop=entropy&cs=srgb&ixid=eyJhcHBfaWQiOjE0NTg5fQ\"\n          alt=\"don't give up\"\n        />\n      </div>\n    );\n  }\n}\n\nclass Timer extends React.Component {\n  handleStart() {\n    alert('Coming Soon!');\n  }\n  render() {\n    return (\n      <div className=\"timer-container\">\n        <label for=\"business\">TIME TO FAST</label>\n        <select className=\"timer-select\" name=\"business\">\n          <option value=\"select\">What is your goal?</option>\n          <option value=\"small\">16 Hours</option>\n          <option value=\"medium\">24 Hours</option>\n          <option value=\"large\">48 Hours</option>\n        </select>\n        <button\n          id=\"timer-start-btn\"\n          type=\"button\"\n          onClick={this.handleStart}\n        >\n          Start!\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}